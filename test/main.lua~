bf = require("windfield/windfield")

function love.load()
   world = bf.newWorld(0, 9.81, true)
   objects = {}

   objects.ground = bf.Collider.new(world, "Polygon",
				    {0, 550, 650, 550 , 650, 650, 0, 650})
   objects.ground:setType("static")
   objects.ball = bf.Collider.new(world, "Circle", 325, 325, 20)
   objects.ball:setRestitution(1.5)
   objects.block1 = bf.Collider.new(world, "Polygon", {150, 375, 250, 375,
						       250, 425, 150, 425})
end

function love.update(dt)
   world:update(dt)
   if love.keyboard.isDown("right") then --press the right arrow key to push the ball to the right
    objects.ball:applyForce(400, 0)
  elseif love.keyboard.isDown("left") then --press the left arrow key to push the ball to the left
    objects.ball:applyForce(-400, 0)
  elseif love.keyboard.isDown("up") then --press the up arrow key to set the ball in the air
    objects.ball:setPosition(650/2, 650/2)
    objects.ball:setLinearVelocity(0, 0) --we must set the velocity to zero to prevent a potentially large velocity generated by the change in position
  end
end


function love.draw()
   love.graphics.setColor(0.28, 0.63, 0.05)
   love.graphics.polygon("fill", objects.ground:getWorldPoints(objects.ground:getPoints()))
   love.graphics.setColor(0.76, 0.18, 0.05) --set the drawing color to red for the ball
  love.graphics.circle("fill", objects.ball:getX(), objects.ball:getY(), objects.ball:getRadius())
 
  love.graphics.setColor(0.20, 0.20, 0.20) -- set the drawing color to grey for the blocks
  love.graphics.polygon("fill", objects.block1:getWorldPoints(objects.block1:getPoints()))

end
